syntax jsonlikeql_syntax (jsonlikeql_lexique) {

rule <start_symbol> {

	@ClassMap classMap = {};
	@CandidateClassMap candidateClassMap = {};

	@FunctionsMap functionsList = {};

	# Class du système

	@Class c = .new{!@lstring.new{!"____Application" !@location.here} !{}}
	[!?classMap insertKey ![c name] !c]

	$types$	
	repeat
	while
		@Class aclass = .default
		<class> !? aclass !? candidateClassMap  
	
		[!?classMap insertKey ![aclass name] !aclass]
	end  

	checkCandidateClass(!candidateClassMap !classMap) 

	$functions$ ${$ 	
	repeat
	while 
		<functions_container> !? functionsList  
	end
	$}$ 

	$queries$ ${$ 	
	repeat
	while
		<queries_container>
	end
	$}$
}


}

# this function checks if all the candidate class have been declared
proc checkCandidateClass
	?@CandidateClassMap candidateClassMap
	?@ClassMap classMap 
	{

	for () in candidateClassMap	do 
		@lstring candidate = lkey 
 
		if( [[candidate string] length] > 0) then
			# on supprime la clé de la liste des clés candidates
			[!?candidateClassMap removeKey !candidate ] 	
 			
 			# on vérifie que la clé candidate est une classe définie
			[classMap searchKey !candidate ?* ] 
		end
	end 
}
