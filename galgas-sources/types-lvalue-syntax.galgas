
#------------------------------------------------------------
#	S E M A N T I Q U E   -   C L A S S
#------------------------------------------------------------


# 	L V A L U E
# ------------------------------------------------------------

class @LValue{
	@location here;
}
	method @LValue getArray
		?!@LValueList value
		{}
	method @LValue getInteger
		?!@uint value
		{}
	method @LValue getDouble
		?!@double value
		{}
	method @LValue getString
		?!@string value
		{}
	method @LValue getChar
		?!@char value
		{}
	method @LValue getBool
		?!@bool value
		{}

class @IntegerLV : @LValue{
	@uint mLvalue;
}
	override method @IntegerLV getInteger
		?!@uint value
		{value = mLvalue}
class @DoubleLV : @LValue{
	@double mLvalue;
}
	override method @DoubleLV getDouble
		?!@double value
		{value = mLvalue}
class @CharLV : @LValue{
	@char mLvalue;
}
	override method @CharLV getChar
		?!@char value
		{value = mLvalue}
class @StringLV : @LValue{
	@string mLvalue;
}
	override method @StringLV getString
		?!@string value
		{value = mLvalue}
class @BoolLV : @LValue{
	@bool mLvalue;
}
	override method @BoolLV getBool
		?!@bool value
		{value = mLvalue}
class @ObjectLV : @LValue{	
	@MemberList mLvalue;
}
class @ArrayLV : @LValue{	
	@LValueList mLvalue;
} 
	override method @ArrayLV getArray
		?!@LValueList value
		{value = mLvalue}

class @Member{
	@string mKey;
	@LValue mValue;
}

list @MemberList {
	@Member mMember;
}

list @LValueList {
	@LValue mItem;
}

#------------------------------------------------------------
#	S Y N T A X
#------------------------------------------------------------

syntax extension jsonlikeql_syntax {

rule <primitive_lvalue> ?!@luint pi ?!@ldouble pd ?!@lstring ps ?!@lchar pc ?!@lbool pb {
	select 
		$integer$ ?let @luint i
		pi = i
	or
		$real$ ?let @ldouble d
		pd = d
	or
		$"string"$ ?let @lstring s
		ps = s
	or
		$'char'$ ?let @lchar c
		pc = c
	or
		<bool_definition> !? pb 
	end
}

rule <bool_definition> ?!@lbool b{
	select 
		$true$ 
		b = @lbool.new{!true !@location.here} 
	or
		$false$ 
		b = @lbool.new{!false !@location.here} 
	end
}

rule <object_definition> 
	?!@MemberList members 
	{ 

	${$ 
		select or		
			repeat
				@LValue lvalue = @LValue.default;

				$identifier$ ?let @lstring key $:$ <value_definition> !?lvalue 

				members += !@Member.new{!key.string !lvalue}
			while
			$,$
			end
		end
	$}$ 
}

rule <value_definition> 
	?!@LValue lvalue 
	{

	select
		$integer$ ?let @luint value
		lvalue = @IntegerLV.new{!@location.here !value.uint} 
	or
		$real$ ?let @ldouble value
		lvalue = @DoubleLV.new{!@location.here !value.double} 
	or
		$'char'$ ?let @lchar value
		lvalue = @CharLV.new{!@location.here !value.char}
	or
		$"string"$ ?let @lstring value
		lvalue = @StringLV.new{!@location.here !value.string} 
	or 
		@lbool value = .default
		<bool_definition> !? value 
		lvalue = @BoolLV.new{!@location.here !value.bool}
	or 
		@LValueList items = {};
		<array_definition>  !?items
		lvalue = @ArrayLV.new{!@location.here !items} 
	or
		@MemberList members = {};
		<object_definition> !?members
		lvalue = @ObjectLV.new{!@location.here !members} 
	end
}

rule <array_definition> 
	?!@LValueList items 
	{

	$[$
	select or  
		repeat
			@LValue lvalue = @LValue.default;
			<value_definition> !? lvalue 
			items += !lvalue;
		while
		$,$
		end
	end
	$]$
}

}

#------------------------------------------------------------
#	S E M A N T I Q U E   -   F U N C T I O N S
#------------------------------------------------------------