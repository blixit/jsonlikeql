
#------------------------------------------------------------
#	S E M A N T I Q U E   -   C L A S S
#------------------------------------------------------------

#------------------------------------------------------------
#	S Y N T A X
#------------------------------------------------------------

syntax extension jsonlikeql_syntax {

#	D E L E T E     Q U E R I E S
#------------------------------------------------------------
rule <queryDelete> 
	? @lchar queryType
	?! @Query query
	? @FunctionsMap functionsMap
	{ 
	$identifier$ ?let @lstring name 

	# détection des paramètres

	@ObjectLV parameters = .default;
	select or
	<function_parameters> !? parameters
	end  

	#@Function functionRef = .default
	#[functionsMap searchKey !name ?function ]

	@lstring returnedType = .default

	getFunctionReturnedType( !name !functionsMap !? returnedType);
 

	#if (checkParameters(!parameters !fct_mParameters) == true) then

	#end
 
	query = @DeleteQuery.new{ !name !@lchar.new{!queryType !@location.here} !parameters !returnedType } 
}

}

#------------------------------------------------------------
#	S E M A N T I Q U E   -   F U N C T I O N S
#------------------------------------------------------------


override method @DeleteQuery toSql 
	?!@string sql
	{ 

	@LocalError erreur = {};
	@string ErrorifArgsRequired = "If-args-required";
	[!? erreur insertKey !.new{!ErrorifArgsRequired !@location.here}]

	sql = "";
	sql += "/* Requete DELETE `"+name.string +"` */\n"
	sql += "DELETE FROM ";

	@string table = ""; 

	[self getMainTable !? table ] 

	sql += "`" + table + "` " ;

	# les conditions et autres clauses sql
	# ---------------------------------------------------

	@MemberList mlist = [parameters mLvalue]

	#si des paramètres ont été fournis
	@uint argsCount = [mlist length]
	if(argsCount > 0) then  
		for member in mlist do 
			if ( [[member mMember] mKey] == "if" ) then 
				############@LValue conditions = [[member mMember ] mValue]				 
				@LValueList conditions = {};
				[[[member mMember ] mValue] getArray !?conditions]
				@string conditionsStr = "";
				@uint nbCond = [conditions length]
				@uint it = 0;

				if ( nbCond == 0) then 
					[!? erreur insertKey !.new{!ErrorifArgsRequired !@location.here}]
				end
				
				for c in conditions do
					@string cstr = ""
					[[c mItem] getString !?cstr] 
					conditionsStr += cstr+ " "
					if (it < nbCond -1 ) then 
						conditionsStr += " "
					end
					it++ 
				end
				sql += "WHERE "+conditionsStr+" "
			end
		end
		#
	end

	sql += ";\n";
}