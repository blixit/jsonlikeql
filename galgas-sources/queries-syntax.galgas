
#------------------------------------------------------------
#	S E M A N T I Q U E   -   C L A S S
#------------------------------------------------------------

# Eénumération des propagations possibles
enum @Propagation{ 
	case default_
	case full_
}

#Définition d'une requete
class @Query{
	@lstring name
	@lchar queryType  
	@ObjectLV parameters
}
	method @Query toSql 
		?!@string sql
	{ }


class @SelectQuery : @Query{
	@QueryMap fields
	@Propagation propagation
} 

class @MutateQuery : @Query{
	@FieldsMap fields 
} 

class @DeleteQuery : @Query{ 
} 

map @QueryMap{
	@Query query
	insert insertKey error message "the '%K' query has been already declared"
	search searchKey error message "the '%K' query is not declared"
}

map @FieldsMap{
	@LValue lvalue
	insert insertKey error message "the '%K' field has been already declared"
	search searchKey error message "the '%K' field is not declared"
}

#------------------------------------------------------------
#	S Y N T A X
#------------------------------------------------------------

syntax extension jsonlikeql_syntax {

rule <queries_container> 
	?! @QueryMap queryMap
	?! @FunctionsMap functionsMap
	{  

	@lchar queryType = .default;
	select 
		$:$ queryType.char = ':'

		@Query query = .default;

	 	<query> ! queryType !? query !? functionsMap

	 	@lstring key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 	[!? queryMap insertKey !key !query] 

		repeat
		while
			query = @Query.default;
			<query> ! queryType !? query !? functionsMap
			key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 		[!? queryMap insertKey !key !query] 
		end
	or	
		select 
			$+$	queryType.char = '+'	
		or	$!$	queryType.char = '!' 
		end 

		@Query query = .default;

	 	<queryMutator> ! queryType !? query !? functionsMap

	 	@lstring key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 	[!? queryMap insertKey !key !query] 

		repeat
		while
			query = @Query.default;
			<queryMutator> ! queryType !? query !? functionsMap
			key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 		[!? queryMap insertKey !key !query] 
		end
	or 
		$-$	queryType.char = '-'
		@Query query = .default;

	 	<queryDelete> ! queryType !? query !? functionsMap

	 	@lstring key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 	[!? queryMap insertKey !key !query] 

		repeat
		while
			query = @Query.default;
			<queryDelete> ! queryType !? query !? functionsMap
			key = @lstring.new{![[queryMap count] string] !@location.here}; 
	 		[!? queryMap insertKey !key !query] 
		end
	end	 	
}

}

#------------------------------------------------------------
#	S E M A N T I Q U E   -   F U N C T I O N S
#------------------------------------------------------------

override method @SelectQuery toSql 
	?!@string sql
	{ 
	sql = "";
	sql += "/* Requete "+name.string +"*/\n"
	sql += "SELECT FROM ";

	sql += "`fakeTable` " ;

	sql += "VALUES ... ;";

	# les conditions et autres directives sql
	# ---------------------------------------------------

	@MemberList mlist = [parameters mLvalue]

	#si des paramètres ont été fournis
	@uint argsCount = [mlist length]
	if(1==0 && argsCount > 0) then  
		for member in mlist do 
			if ( [[member mMember] mKey] == "if" ) then 
				############@LValue conditions = [[member mMember ] mValue]				 
				@LValueList conditions = {};
				[[[member mMember ] mValue] getArray !?conditions]
				@string conditionsStr = "";
				@uint nbCond = [conditions length]
				@uint it = 0;
				
				for c in conditions do
					@string cstr = ""
					[[c mItem] getString !?cstr] 
					conditionsStr += cstr+ " "
					if (it < nbCond -1 ) then 
						conditionsStr += " "
					end
					it++ 
				end
				sql += "WHERE "+conditionsStr+" "
			end
		end
		#
	end

	sql += ";\n";
}

override method @MutateQuery toSql 
	?!@string sql
	{
	sql = "";
	sql += "/* Requete "+name.string +"*/\n"


	if ( [queryType char] == '+') then 
		sql += "INSERT INTO ";

		sql += "`fakeTable` " ;

		sql += "VALUES (...) ";
	else
		sql += "UPDATE ";

		sql += "`fakeTable` " ;

		sql += "SET ... ";
	end


		

	sql += ";\n";
}

override method @DeleteQuery toSql 
	?!@string sql
	{ 

	sql = "";
	sql += "/* Requete "+name.string +"*/\n"
	sql += "DELETE FROM ";

	sql += "`fakeTable`" + " " ;

	# les conditions et autres directives sql
	# ---------------------------------------------------

	@MemberList mlist = [parameters mLvalue]

	#si des paramètres ont été fournis
	@uint argsCount = [mlist length]
	if(argsCount > 0) then  
		for member in mlist do 
			if ( [[member mMember] mKey] == "if" ) then 
				############@LValue conditions = [[member mMember ] mValue]				 
				@LValueList conditions = {};
				[[[member mMember ] mValue] getArray !?conditions]
				@string conditionsStr = "";
				@uint nbCond = [conditions length]
				@uint it = 0;
				
				for c in conditions do
					@string cstr = ""
					[[c mItem] getString !?cstr] 
					conditionsStr += cstr+ " "
					if (it < nbCond -1 ) then 
						conditionsStr += " "
					end
					it++ 
				end
				sql += "WHERE "+conditionsStr+" "
			end
		end
		#
	end

	sql += ";\n";
}