lexique jsonlikeql_lexique {

#----------------------------------------------------------------------------------------------------------------------*
#   Identifiers and keywords                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

@string tokenString

style keywordsStyle -> "Keywords"

$identifier$ ! tokenString error message "an identifier"

#--- This is the keyword list
list keyWordList style keywordsStyle error message "the '%K' keyword" {
  "types",
  "functions",
  "queries",

# values and types
  "null",
  "true",
  "false",  
  "Bool", 
  "Int", 
  "Real",  
  "Char",  
  "String",  

# available functions
  "select",
  "insert",
  "update",
  "delete",

# queries features
  "propagate",
  "default",
  "full"
}

rule 'a'->'z' |  'A'->'Z' {
  repeat
    enterCharacterIntoString (!?tokenString !*)
  while 'a'->'z' | 'A'->'Z' | '-' | '_' | '0'->'9' :
  end
  send search tokenString in keyWordList default $identifier$
}

#----------------------------------------------------------------------------------------------------------------------*
#   Literal decimal integers and double                                                                                        *
#----------------------------------------------------------------------------------------------------------------------*

#   Literal decimal integers  
#----------------------------------------------

style integerStyle -> "Integer Constants"
@uint uint32value
$integer$ !uint32value style integerStyle error message "a 32-bit unsigned decimal number"

message decimalNumberTooLarge : "decimal number too large"
message internalError : "internal error"

#   Literal decimal double  
#----------------------------------------------

style realStyle -> "Real Constants"
@double doublevalue
$real$ !doublevalue style realStyle error message "a 64-bit floatting decimal number"

message inConversionError : "inConversionError error"

#----------------------------------------------

rule '0'->'9' {
  enterCharacterIntoString (!?tokenString !*)
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !*)
  while '_' :
  end
  select 
  case '.' :
    enterCharacterIntoString (!?tokenString !*)
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !*)
    while '_' :
    end
    convertStringToDouble( !tokenString !?doublevalue error inConversionError)
    send $real$
  default 
    convertDecimalStringIntoUInt (!tokenString !?uint32value error decimalNumberTooLarge, internalError)
    send $integer$
  end
  
}
 

#----------------------------------------------------------------------------------------------------------------------*
#   Literal character strings                                                                                          *
#----------------------------------------------------------------------------------------------------------------------*

style stringStyle -> "String Constants"
$"string"$ ! tokenString style stringStyle %nonAtomicSelection error message "a character string constant \"...\""


message incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
  while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString (!?tokenString !*)
  end
  select
  case '"' :
    send $"string"$
  default
    error incorrectStringEnd
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   Literal character                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

@char letter
style charStyle -> "Character"
$'char'$ ! letter style charStyle error message "a character constant \"...\""


message incorrectCharEnd : "char does not end with '\''"

rule ''' { 
  select
  case ' ' | '!' | '#'-> '\uFFFD' : 
    enterCharacterIntoCharacter(!?letter !*)
  default

  end
  select
  case ''' :
    send $'char'$
  default
    error incorrectCharEnd
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   Delimiters                                                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

style delimitersStyle -> "Delimiters"
list delimitorsList style delimitersStyle error message "the '%K' delimitor" {
  ":", ";", "'",  ",",  "{",  "}",  "(",  ")",  "[",  "]", "->", "+", "!", "-", "="
}

rule list delimitorsList

#----------------------------------------------------------------------------------------------------------------------*
#   Comments                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

style commentStyle -> "Comments"
$comment$ style commentStyle %nonAtomicSelection error message "a comment"
rule '#' {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

#----------------------------------------------------------------------------------------------------------------------*
#   Separators                                                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

rule '\u0001' -> ' ' {
}

#----------------------------------------------------------------------------------------------------------------------*

}

